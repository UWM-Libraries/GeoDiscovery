# frozen_string_literal: true

require "exception_notification/rails"
require "redis"

redis = Redis.new

ExceptionNotification.configure do |config|
  # Ignore additional exception types.
  # ActiveRecord::RecordNotFound, Mongoid::Errors::DocumentNotFound, AbstractController::ActionNotFound and ActionController::RoutingError are already added.
  # config.ignored_exceptions += %w{ActionView::TemplateError CustomError}

  # Adds a condition to decide when an exception must be ignored or not.
  # The ignore_if method can be invoked multiple times to add extra conditions.
  config.ignore_if do |exception, options|
    !Rails.env.production?
  end

  # Ignore exceptions generated by crawlers
  config.ignore_crawlers %w[Googlebot bingbot]

  # Notifiers =================================================================

  # Email notifier sends notifications by email.
  config.add_notifier :email, {
    email_prefix: "[GeoDiscovery ERROR]",
    sender_address: %("GeoDiscovery" <notifier@#{`hostname`.strip}>),
    exception_recipients: %w[gisdata@uwm.edu]
  }

  # Campfire notifier sends notifications to your Campfire room. Requires 'tinder' gem.
  # config.add_notifier :campfire, {
  #   subdomain: 'my_subdomain',
  #   token: 'my_token',
  #   room_name: 'my_room'
  # }

  # HipChat notifier sends notifications to your HipChat room. Requires 'hipchat' gem.
  # config.add_notifier :hipchat, {
  #   api_token: 'my_token',
  #   room_name: 'my_room'
  # }

  # Webhook notifier sends notifications over HTTP protocol. Requires 'httparty' gem.
  # config.add_notifier :webhook, {
  #   url: 'http://example.com:5555/hubot/path',
  #   http_method: :post
  # }

  # Rate limiting for exceptions using Redis
  config.ignore_if do |exception, options|
    exception_key = "exception_#{exception.class.name}_#{Digest::SHA1.hexdigest(exception.message)}"
    rate_limit_time = 30.minutes

    if redis.get(exception_key)
      Rails.logger.info("Rate-limited: #{exception.class.name} - #{exception.message}")
      true
    else
      redis.set(exception_key, true, ex: rate_limit_time)
      Rails.logger.info("Notified: #{exception.class.name} - #{exception.message}")
      false
    end
  rescue Redis::BaseError => e
    Rails.logger.error("Redis connection failed: #{e.message}. Sending notification anyway.")
    false  # Fallback to send the notification in case of Redis failure
  end
end
